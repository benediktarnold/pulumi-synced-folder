// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package syncedfolder

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type S3BucketFolder struct {
	pulumi.ResourceState
}

// NewS3BucketFolder registers a new resource with the given unique name, arguments, and options.
func NewS3BucketFolder(ctx *pulumi.Context,
	name string, args *S3BucketFolderArgs, opts ...pulumi.ResourceOption) (*S3BucketFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Acl == nil {
		return nil, errors.New("invalid value for required argument 'Acl'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	var resource S3BucketFolder
	err := ctx.RegisterRemoteComponentResource("synced-folder:index:S3BucketFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type s3bucketFolderArgs struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to apply to each file (e.g., `public-read`). Required.
	Acl string `pulumi:"acl"`
	// The name of the S3 bucket to sync to (e.g., `my-bucket` in `s3://my-bucket`). Required.
	BucketName string `pulumi:"bucketName"`
	// Disables adding an [alias](https://www.pulumi.com/docs/intro/concepts/resources/options/aliases/) resource option to managed objects in the bucket.
	DisableManagedObjectAliases *bool `pulumi:"disableManagedObjectAliases"`
	// Include hidden files ("dotfiles") when synchronixing folders. False by default.
	IncludeHiddenFiles *bool `pulumi:"includeHiddenFiles"`
	// Whether to have Pulumi manage files as individual cloud resources. Defaults to `true`.
	ManagedObjects *bool `pulumi:"managedObjects"`
	// The path (relative or fully-qualified) to the folder containing the files to be synced. Required.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a S3BucketFolder resource.
type S3BucketFolderArgs struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to apply to each file (e.g., `public-read`). Required.
	Acl pulumi.StringInput
	// The name of the S3 bucket to sync to (e.g., `my-bucket` in `s3://my-bucket`). Required.
	BucketName pulumi.StringInput
	// Disables adding an [alias](https://www.pulumi.com/docs/intro/concepts/resources/options/aliases/) resource option to managed objects in the bucket.
	DisableManagedObjectAliases pulumi.BoolPtrInput
	// Include hidden files ("dotfiles") when synchronixing folders. False by default.
	IncludeHiddenFiles pulumi.BoolPtrInput
	// Whether to have Pulumi manage files as individual cloud resources. Defaults to `true`.
	ManagedObjects pulumi.BoolPtrInput
	// The path (relative or fully-qualified) to the folder containing the files to be synced. Required.
	Path pulumi.StringInput
}

func (S3BucketFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketFolderArgs)(nil)).Elem()
}

type S3BucketFolderInput interface {
	pulumi.Input

	ToS3BucketFolderOutput() S3BucketFolderOutput
	ToS3BucketFolderOutputWithContext(ctx context.Context) S3BucketFolderOutput
}

func (*S3BucketFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**S3BucketFolder)(nil)).Elem()
}

func (i *S3BucketFolder) ToS3BucketFolderOutput() S3BucketFolderOutput {
	return i.ToS3BucketFolderOutputWithContext(context.Background())
}

func (i *S3BucketFolder) ToS3BucketFolderOutputWithContext(ctx context.Context) S3BucketFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketFolderOutput)
}

// S3BucketFolderArrayInput is an input type that accepts S3BucketFolderArray and S3BucketFolderArrayOutput values.
// You can construct a concrete instance of `S3BucketFolderArrayInput` via:
//
//	S3BucketFolderArray{ S3BucketFolderArgs{...} }
type S3BucketFolderArrayInput interface {
	pulumi.Input

	ToS3BucketFolderArrayOutput() S3BucketFolderArrayOutput
	ToS3BucketFolderArrayOutputWithContext(context.Context) S3BucketFolderArrayOutput
}

type S3BucketFolderArray []S3BucketFolderInput

func (S3BucketFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3BucketFolder)(nil)).Elem()
}

func (i S3BucketFolderArray) ToS3BucketFolderArrayOutput() S3BucketFolderArrayOutput {
	return i.ToS3BucketFolderArrayOutputWithContext(context.Background())
}

func (i S3BucketFolderArray) ToS3BucketFolderArrayOutputWithContext(ctx context.Context) S3BucketFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketFolderArrayOutput)
}

// S3BucketFolderMapInput is an input type that accepts S3BucketFolderMap and S3BucketFolderMapOutput values.
// You can construct a concrete instance of `S3BucketFolderMapInput` via:
//
//	S3BucketFolderMap{ "key": S3BucketFolderArgs{...} }
type S3BucketFolderMapInput interface {
	pulumi.Input

	ToS3BucketFolderMapOutput() S3BucketFolderMapOutput
	ToS3BucketFolderMapOutputWithContext(context.Context) S3BucketFolderMapOutput
}

type S3BucketFolderMap map[string]S3BucketFolderInput

func (S3BucketFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3BucketFolder)(nil)).Elem()
}

func (i S3BucketFolderMap) ToS3BucketFolderMapOutput() S3BucketFolderMapOutput {
	return i.ToS3BucketFolderMapOutputWithContext(context.Background())
}

func (i S3BucketFolderMap) ToS3BucketFolderMapOutputWithContext(ctx context.Context) S3BucketFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketFolderMapOutput)
}

type S3BucketFolderOutput struct{ *pulumi.OutputState }

func (S3BucketFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3BucketFolder)(nil)).Elem()
}

func (o S3BucketFolderOutput) ToS3BucketFolderOutput() S3BucketFolderOutput {
	return o
}

func (o S3BucketFolderOutput) ToS3BucketFolderOutputWithContext(ctx context.Context) S3BucketFolderOutput {
	return o
}

type S3BucketFolderArrayOutput struct{ *pulumi.OutputState }

func (S3BucketFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3BucketFolder)(nil)).Elem()
}

func (o S3BucketFolderArrayOutput) ToS3BucketFolderArrayOutput() S3BucketFolderArrayOutput {
	return o
}

func (o S3BucketFolderArrayOutput) ToS3BucketFolderArrayOutputWithContext(ctx context.Context) S3BucketFolderArrayOutput {
	return o
}

func (o S3BucketFolderArrayOutput) Index(i pulumi.IntInput) S3BucketFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3BucketFolder {
		return vs[0].([]*S3BucketFolder)[vs[1].(int)]
	}).(S3BucketFolderOutput)
}

type S3BucketFolderMapOutput struct{ *pulumi.OutputState }

func (S3BucketFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3BucketFolder)(nil)).Elem()
}

func (o S3BucketFolderMapOutput) ToS3BucketFolderMapOutput() S3BucketFolderMapOutput {
	return o
}

func (o S3BucketFolderMapOutput) ToS3BucketFolderMapOutputWithContext(ctx context.Context) S3BucketFolderMapOutput {
	return o
}

func (o S3BucketFolderMapOutput) MapIndex(k pulumi.StringInput) S3BucketFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3BucketFolder {
		return vs[0].(map[string]*S3BucketFolder)[vs[1].(string)]
	}).(S3BucketFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketFolderInput)(nil)).Elem(), &S3BucketFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketFolderArrayInput)(nil)).Elem(), S3BucketFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketFolderMapInput)(nil)).Elem(), S3BucketFolderMap{})
	pulumi.RegisterOutputType(S3BucketFolderOutput{})
	pulumi.RegisterOutputType(S3BucketFolderArrayOutput{})
	pulumi.RegisterOutputType(S3BucketFolderMapOutput{})
}
